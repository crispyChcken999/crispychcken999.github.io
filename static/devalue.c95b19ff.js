Object.getOwnPropertyNames(Object.prototype).sort().join("\0");const e=-1,t=-2,r=-3,n=-4,o=-5,a=-6;function s(s,c){return function(s,c){if("number"==typeof s)return l(s,!0);if(!Array.isArray(s)||0===s.length)throw new Error("Invalid input");const i=s,f=Array(i.length);function l(s,u=!1){if(s===e)return;if(s===r)return NaN;if(s===n)return 1/0;if(s===o)return-1/0;if(s===a)return-0;if(u)throw new Error("Invalid input");if(s in f)return f[s];const p=i[s];if(p&&"object"==typeof p)if(Array.isArray(p))if("string"==typeof p[0]){const e=p[0],t=null==c?void 0:c[e];if(t)return f[s]=t(l(p[1]));switch(e){case"Date":f[s]=new Date(p[1]);break;case"Set":const t=new Set;f[s]=t;for(let e=1;e<p.length;e+=1)t.add(l(p[e]));break;case"Map":const r=new Map;f[s]=r;for(let e=1;e<p.length;e+=2)r.set(l(p[e]),l(p[e+1]));break;case"RegExp":f[s]=new RegExp(p[1],p[2]);break;case"Object":f[s]=Object(p[1]);break;case"BigInt":f[s]=BigInt(p[1]);break;case"null":const n=Object.create(null);f[s]=n;for(let e=1;e<p.length;e+=2)n[p[e]]=l(p[e+1]);break;default:throw new Error(`Unknown type ${e}`)}}else{const e=new Array(p.length);f[s]=e;for(let r=0;r<p.length;r+=1){const n=p[r];n!==t&&(e[r]=l(n))}}else{const e={};f[s]=e;for(const t in p){const r=p[t];e[t]=l(r)}}else f[s]=p;return f[s]}return l(0)}(JSON.parse(s),c)}export{s as p};
